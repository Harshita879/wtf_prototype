"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat/route";
exports.ids = ["app/api/chat/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cprafu%5CDownloads%5Cwtf_prototype%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cprafu%5CDownloads%5Cwtf_prototype&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cprafu%5CDownloads%5Cwtf_prototype%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cprafu%5CDownloads%5Cwtf_prototype&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_prafu_Downloads_wtf_prototype_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/chat/route.ts */ \"(rsc)/./src/app/api/chat/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat/route\",\n        pathname: \"/api/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\prafu\\\\Downloads\\\\wtf_prototype\\\\src\\\\app\\\\api\\\\chat\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_prafu_Downloads_wtf_prototype_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/chat/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjaGF0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZjaGF0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY2hhdCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNwcmFmdSU1Q0Rvd25sb2FkcyU1Q3d0Zl9wcm90b3R5cGUlNUNzcmMlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q3ByYWZ1JTVDRG93bmxvYWRzJTVDd3RmX3Byb3RvdHlwZSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDeUI7QUFDdEc7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93dGYtcG9kY2FzdC8/YTQ0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxwcmFmdVxcXFxEb3dubG9hZHNcXFxcd3RmX3Byb3RvdHlwZVxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxjaGF0XFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jaGF0L3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvY2hhdFwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvY2hhdC9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXHByYWZ1XFxcXERvd25sb2Fkc1xcXFx3dGZfcHJvdG90eXBlXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGNoYXRcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2NoYXQvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cprafu%5CDownloads%5Cwtf_prototype%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cprafu%5CDownloads%5Cwtf_prototype&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/chat/route.ts":
/*!***********************************!*\
  !*** ./src/app/api/chat/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_ai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/ai */ \"(rsc)/./src/lib/ai.ts\");\n\n\nasync function POST(request) {\n    try {\n        const { message } = await request.json();\n        if (!message || typeof message !== \"string\") {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Valid message is required\"\n            }, {\n                status: 400\n            });\n        }\n        const cleanMessage = message.trim();\n        if (cleanMessage.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Message cannot be empty\"\n            }, {\n                status: 400\n            });\n        }\n        let response;\n        try {\n            response = await (0,_lib_ai__WEBPACK_IMPORTED_MODULE_1__.generateResponse)(cleanMessage);\n        } catch (error) {\n            console.error(\"AI generation error:\", error);\n            response = (0,_lib_ai__WEBPACK_IMPORTED_MODULE_1__.getQuickResponse)(cleanMessage);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            response: response,\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"Chat API error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Something went wrong! Please try again.\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET() {\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        status: \"WTF Podcast AI is running! \\uD83E\\uDD16\",\n        timestamp: new Date().toISOString()\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9jaGF0L3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBdUQ7QUFDYTtBQUU3RCxlQUFlRyxLQUFLQyxPQUFvQjtJQUM3QyxJQUFJO1FBQ0YsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBRyxNQUFNRCxRQUFRRSxJQUFJO1FBRXRDLElBQUksQ0FBQ0QsV0FBVyxPQUFPQSxZQUFZLFVBQVU7WUFDM0MsT0FBT0wscURBQVlBLENBQUNNLElBQUksQ0FBQztnQkFBRUMsT0FBTztZQUE0QixHQUFHO2dCQUFFQyxRQUFRO1lBQUk7UUFDakY7UUFFQSxNQUFNQyxlQUFlSixRQUFRSyxJQUFJO1FBRWpDLElBQUlELGFBQWFFLE1BQU0sS0FBSyxHQUFHO1lBQzdCLE9BQU9YLHFEQUFZQSxDQUFDTSxJQUFJLENBQUM7Z0JBQUVDLE9BQU87WUFBMEIsR0FBRztnQkFBRUMsUUFBUTtZQUFJO1FBQy9FO1FBRUEsSUFBSUk7UUFFSixJQUFJO1lBQ0ZBLFdBQVcsTUFBTVgseURBQWdCQSxDQUFDUTtRQUNwQyxFQUFFLE9BQU9GLE9BQU87WUFDZE0sUUFBUU4sS0FBSyxDQUFDLHdCQUF3QkE7WUFDdENLLFdBQVdWLHlEQUFnQkEsQ0FBQ087UUFDOUI7UUFFQSxPQUFPVCxxREFBWUEsQ0FBQ00sSUFBSSxDQUFDO1lBQ3ZCTSxVQUFVQTtZQUNWRSxXQUFXLElBQUlDLE9BQU9DLFdBQVc7UUFDbkM7SUFFRixFQUFFLE9BQU9ULE9BQU87UUFDZE0sUUFBUU4sS0FBSyxDQUFDLG1CQUFtQkE7UUFDakMsT0FBT1AscURBQVlBLENBQUNNLElBQUksQ0FDdEI7WUFBRUMsT0FBTztRQUEwQyxHQUNuRDtZQUFFQyxRQUFRO1FBQUk7SUFFbEI7QUFDRjtBQUVPLGVBQWVTO0lBQ3BCLE9BQU9qQixxREFBWUEsQ0FBQ00sSUFBSSxDQUFDO1FBQ3ZCRSxRQUFRO1FBQ1JNLFdBQVcsSUFBSUMsT0FBT0MsV0FBVztJQUNuQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3RmLXBvZGNhc3QvLi9zcmMvYXBwL2FwaS9jaGF0L3JvdXRlLnRzPzQ2YjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJ1xuaW1wb3J0IHsgZ2VuZXJhdGVSZXNwb25zZSwgZ2V0UXVpY2tSZXNwb25zZSB9IGZyb20gJy4uLy4uLy4uL2xpYi9haSdcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IG1lc3NhZ2UgfSA9IGF3YWl0IHJlcXVlc3QuanNvbigpXG4gICAgXG4gICAgaWYgKCFtZXNzYWdlIHx8IHR5cGVvZiBtZXNzYWdlICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdWYWxpZCBtZXNzYWdlIGlzIHJlcXVpcmVkJyB9LCB7IHN0YXR1czogNDAwIH0pXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGNsZWFuTWVzc2FnZSA9IG1lc3NhZ2UudHJpbSgpXG4gICAgXG4gICAgaWYgKGNsZWFuTWVzc2FnZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnTWVzc2FnZSBjYW5ub3QgYmUgZW1wdHknIH0sIHsgc3RhdHVzOiA0MDAgfSlcbiAgICB9XG4gICAgXG4gICAgbGV0IHJlc3BvbnNlOiBzdHJpbmdcbiAgICBcbiAgICB0cnkge1xuICAgICAgcmVzcG9uc2UgPSBhd2FpdCBnZW5lcmF0ZVJlc3BvbnNlKGNsZWFuTWVzc2FnZSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignQUkgZ2VuZXJhdGlvbiBlcnJvcjonLCBlcnJvcilcbiAgICAgIHJlc3BvbnNlID0gZ2V0UXVpY2tSZXNwb25zZShjbGVhbk1lc3NhZ2UpXG4gICAgfVxuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IFxuICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICB9KVxuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0NoYXQgQVBJIGVycm9yOicsIGVycm9yKVxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICdTb21ldGhpbmcgd2VudCB3cm9uZyEgUGxlYXNlIHRyeSBhZ2Fpbi4nIH0sIFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoKSB7XG4gIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IFxuICAgIHN0YXR1czogJ1dURiBQb2RjYXN0IEFJIGlzIHJ1bm5pbmchIPCfpJYnLFxuICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gIH0pXG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsImdlbmVyYXRlUmVzcG9uc2UiLCJnZXRRdWlja1Jlc3BvbnNlIiwiUE9TVCIsInJlcXVlc3QiLCJtZXNzYWdlIiwianNvbiIsImVycm9yIiwic3RhdHVzIiwiY2xlYW5NZXNzYWdlIiwidHJpbSIsImxlbmd0aCIsInJlc3BvbnNlIiwiY29uc29sZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsIkdFVCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/chat/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/ai.ts":
/*!***********************!*\
  !*** ./src/lib/ai.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateEnhancedResponse: () => (/* binding */ generateEnhancedResponse)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n// improved-ai.ts\n// Enhanced podcast Q&A system based on Quivr's best practices\n\n\n// --- CONFIGURATION ---\nconst GROQ_API_KEY = process.env.GROQ_API_KEY;\nconst OPENAI_API_KEY = process.env.OPENAI_API_KEY;\n// --- GLOBAL STATE ---\nlet enhancedChunks = [];\nlet episodeMetadata = new Map();\nlet isReady = false;\n// --- QUIVR-INSPIRED IMPROVEMENTS ---\n// 1. SMART CHUNKING - Preserves context and speaker boundaries\nfunction createSmartChunks(content, episodeName) {\n    const chunks = [];\n    // Split by natural boundaries (paragraphs, speaker changes)\n    const sections = content.split(/\\n\\s*\\n|\\n(?=[A-Z][a-z]*:)/).filter((s)=>s.trim().length > 50);\n    let chunkIndex = 0;\n    for(let i = 0; i < sections.length; i++){\n        const section = sections[i].trim();\n        // If section is too long, split smartly\n        if (section.length > 800) {\n            const sentences = section.split(/[.!?]+/).filter((s)=>s.trim().length > 20);\n            let currentChunk = \"\";\n            for (const sentence of sentences){\n                if ((currentChunk + sentence).length > 600) {\n                    if (currentChunk.trim()) {\n                        chunks.push(createChunkWithMetadata(currentChunk.trim(), episodeName, chunkIndex++, {\n                            prevContext: i > 0 ? sections[i - 1].slice(-100) : \"\",\n                            nextContext: i < sections.length - 1 ? sections[i + 1].slice(0, 100) : \"\"\n                        }));\n                    }\n                    currentChunk = sentence;\n                } else {\n                    currentChunk += sentence + \". \";\n                }\n            }\n            if (currentChunk.trim()) {\n                chunks.push(createChunkWithMetadata(currentChunk.trim(), episodeName, chunkIndex++, {\n                    prevContext: i > 0 ? sections[i - 1].slice(-100) : \"\",\n                    nextContext: i < sections.length - 1 ? sections[i + 1].slice(0, 100) : \"\"\n                }));\n            }\n        } else {\n            // Section is good size, keep as-is\n            chunks.push(createChunkWithMetadata(section, episodeName, chunkIndex++, {\n                prevContext: i > 0 ? sections[i - 1].slice(-100) : \"\",\n                nextContext: i < sections.length - 1 ? sections[i + 1].slice(0, 100) : \"\"\n            }));\n        }\n    }\n    return chunks;\n}\n// 2. ENHANCED METADATA EXTRACTION\nfunction createChunkWithMetadata(text, episodeName, index, context) {\n    // Extract speaker information\n    const speakerMatch = text.match(/^([A-Z][a-z\\s]+):\\s*(.+)/);\n    let speaker = \"unknown\";\n    let guestName;\n    let cleanText = text;\n    if (speakerMatch) {\n        const speakerName = speakerMatch[1].toLowerCase();\n        cleanText = speakerMatch[2];\n        if (speakerName.includes(\"nikhil\") || speakerName.includes(\"host\")) {\n            speaker = \"host\";\n        } else {\n            speaker = \"guest\";\n            guestName = speakerMatch[1];\n        }\n    }\n    // Extract topics using enhanced keyword detection\n    const topics = extractTopics(cleanText + \" \" + context.prevContext + \" \" + context.nextContext);\n    // Extract timestamp if present\n    const timestampMatch = text.match(/\\[(\\d{1,2}:\\d{2}(?::\\d{2})?)\\]/);\n    const timestamp = timestampMatch ? timestampMatch[1] : undefined;\n    return {\n        text: cleanText,\n        episode: episodeName,\n        episodeTitle: formatEpisodeTitle(episodeName),\n        speaker,\n        guestName,\n        timestamp,\n        topics,\n        index,\n        context: context.prevContext + \" [...] \" + context.nextContext\n    };\n}\n// 3. ENHANCED TOPIC EXTRACTION\nfunction extractTopics(text) {\n    const topicPatterns = {\n        \"real-estate\": /real estate|property|housing|construction|builder|apartment|rent/gi,\n        \"gaming\": /game|gaming|esports|mobile gaming|pc gaming|console|developer/gi,\n        \"startup\": /startup|entrepreneur|business|company|venture|founder/gi,\n        \"fintech\": /fintech|financial|banking|payment|wallet|upi|digital payment/gi,\n        \"edtech\": /education|learning|online course|skill|training|edtech/gi,\n        \"food\": /restaurant|food|dining|kitchen|chef|delivery|zomato|swiggy/gi,\n        \"ev\": /electric vehicle|ev|battery|automotive|car|vehicle|charging/gi,\n        \"investment\": /investment|funding|vc|investor|capital|valuation|ipo/gi,\n        \"marketing\": /marketing|brand|advertising|content|social media|influencer/gi,\n        \"healthcare\": /healthcare|medical|hospital|doctor|telemedicine|pharma/gi\n    };\n    const detectedTopics = [];\n    Object.entries(topicPatterns).forEach(([topic, pattern])=>{\n        if (pattern.test(text)) {\n            detectedTopics.push(topic);\n        }\n    });\n    return detectedTopics;\n}\n// 4. MULTI-STAGE RETRIEVAL (Quivr's approach)\nasync function performMultiStageRetrieval(query) {\n    const results = [];\n    // Stage 1: Topic-based filtering\n    const queryTopics = extractTopics(query);\n    const topicFilteredChunks = queryTopics.length > 0 ? enhancedChunks.filter((chunk)=>chunk.topics.some((topic)=>queryTopics.includes(topic))) : enhancedChunks;\n    console.log(`Stage 1: Filtered to ${topicFilteredChunks.length} chunks by topics: ${queryTopics.join(\", \")}`);\n    // Stage 2: Semantic similarity (if embeddings available)\n    const queryEmbedding = await getEmbedding(query);\n    let semanticCandidates = [];\n    if (queryEmbedding) {\n        const semanticResults = topicFilteredChunks.filter((chunk)=>chunk.embedding).map((chunk)=>({\n                chunk,\n                similarity: cosineSimilarity(queryEmbedding, chunk.embedding || [])\n            })).filter((result)=>result.similarity > 0.25) // Higher threshold\n        .sort((a, b)=>b.similarity - a.similarity).slice(0, 10);\n        semanticCandidates = semanticResults.map((r)=>r.chunk);\n        console.log(`Stage 2: Found ${semanticCandidates.length} semantic matches`);\n    }\n    // Stage 3: Enhanced keyword matching with context\n    const keywordCandidates = enhancedKeywordSearch(query, topicFilteredChunks);\n    // Stage 4: Combine and re-rank results\n    const combinedCandidates = [\n        ...semanticCandidates,\n        ...keywordCandidates\n    ];\n    const uniqueCandidatesMap = new Map();\n    // Remove duplicates by creating a unique key for each chunk\n    combinedCandidates.forEach((chunk)=>{\n        const key = `${chunk.episode}-${chunk.index}`;\n        if (!uniqueCandidatesMap.has(key)) {\n            uniqueCandidatesMap.set(key, chunk);\n        }\n    });\n    const allCandidates = Array.from(uniqueCandidatesMap.values());\n    for (const chunk of allCandidates){\n        const relevanceScore = calculateEnhancedRelevance(query, chunk, queryEmbedding || undefined);\n        const confidenceLevel = determineConfidenceLevel(relevanceScore, chunk, query);\n        const matchReason = explainMatch(query, chunk, relevanceScore);\n        if (relevanceScore > 0.3) {\n            results.push({\n                chunk,\n                relevanceScore,\n                confidenceLevel,\n                matchReason\n            });\n        }\n    }\n    return results.sort((a, b)=>b.relevanceScore - a.relevanceScore).slice(0, 5) // Top 5 results\n    ;\n}\n// 5. ENHANCED RELEVANCE CALCULATION\nfunction calculateEnhancedRelevance(query, chunk, queryEmbedding) {\n    let score = 0;\n    // Semantic similarity (40% weight)\n    if (queryEmbedding && chunk.embedding) {\n        const semanticScore = cosineSimilarity(queryEmbedding, chunk.embedding);\n        score += semanticScore * 0.4;\n    }\n    // Keyword relevance (30% weight)\n    const keywordScore = calculateKeywordRelevance(query, chunk.text);\n    score += keywordScore * 0.3;\n    // Topic alignment (20% weight)\n    const queryTopics = extractTopics(query);\n    const topicOverlap = chunk.topics.filter((topic)=>queryTopics.includes(topic)).length;\n    const topicScore = queryTopics.length > 0 ? topicOverlap / queryTopics.length : 0.5;\n    score += topicScore * 0.2;\n    // Context relevance (10% weight)\n    const contextScore = calculateKeywordRelevance(query, chunk.context);\n    score += contextScore * 0.1;\n    return Math.min(score, 1);\n}\n// 6. CONFIDENCE LEVEL DETERMINATION\nfunction determineConfidenceLevel(score, chunk, query) {\n    // High confidence: Strong match with clear topic alignment\n    if (score > 0.7 && chunk.topics.length > 0) {\n        const queryTopics = extractTopics(query);\n        if (queryTopics.some((topic)=>chunk.topics.includes(topic))) {\n            return \"high\";\n        }\n    }\n    // Medium confidence: Good match but less certain\n    if (score > 0.5) {\n        return \"medium\";\n    }\n    return \"low\";\n}\n// 7. ANTI-HALLUCINATION SYSTEM PROMPT (Quivr's approach)\nfunction createAntiHallucinationPrompt(results) {\n    const highConfidenceResults = results.filter((r)=>r.confidenceLevel === \"high\");\n    const mediumConfidenceResults = results.filter((r)=>r.confidenceLevel === \"medium\");\n    return `You are a podcast analyst that ONLY uses provided transcript content. Follow these STRICT rules:\n\n**ABSOLUTE REQUIREMENTS:**\n1. NEVER make claims not directly supported by the provided content\n2. ALWAYS cite the specific episode and speaker for each claim\n3. If content is insufficient, say \"Based on the available episodes, I don't have enough specific information about [topic]\"\n4. Distinguish between high-confidence and medium-confidence information\n\n**CONTENT CONFIDENCE LEVELS:**\nHIGH CONFIDENCE (${highConfidenceResults.length} sources): Direct, clear information\nMEDIUM CONFIDENCE (${mediumConfidenceResults.length} sources): Relevant but less specific\n\n**RESPONSE FORMAT:**\n1. **Direct Answer**: Clear response based on available content\n2. **Key Points**: Specific insights with episode citations\n3. **Source Attribution**: \n   - Episode: [Episode Name]\n   - Speaker: [Guest/Host Name]\n   - Context: [Brief context]\n4. **Confidence Note**: Indicate if information is complete or partial\n\n**FORBIDDEN:**\n- General knowledge not from transcripts\n- Assumptions or extrapolations\n- Generic business advice not specifically mentioned\n- Information from \"similar\" episodes not provided\n\nIf you cannot answer adequately with the provided content, be honest about the limitations.`;\n}\n// 8. ENHANCED RESPONSE GENERATION\nasync function generateEnhancedResponse(query) {\n    console.log(\"=== ENHANCED QUERY PROCESSING ===\");\n    console.log(`Query: \"${query}\"`);\n    try {\n        // Initialize if needed\n        await initializeEnhanced();\n        if (!isReady) {\n            return \"System not ready. Please check transcript files and API keys.\";\n        }\n        // Multi-stage retrieval\n        const results = await performMultiStageRetrieval(query);\n        if (results.length === 0) {\n            return `I don't have specific information about \"${query}\" in the available podcast episodes. Try asking about topics that were explicitly discussed, such as: ${getAvailableTopics().join(\", \")}.`;\n        }\n        // Build context with confidence levels\n        const context = results.map((result, i)=>{\n            const confidenceEmoji = result.confidenceLevel === \"high\" ? \"\\uD83C\\uDFAF\" : result.confidenceLevel === \"medium\" ? \"\\uD83D\\uDD0D\" : \"\\uD83D\\uDCAD\";\n            return `${confidenceEmoji} **${result.confidenceLevel.toUpperCase()} CONFIDENCE** - Episode: ${result.chunk.episodeTitle}\n${result.chunk.speaker === \"guest\" && result.chunk.guestName ? `Speaker: ${result.chunk.guestName}` : `Speaker: ${result.chunk.speaker}`}\n${result.chunk.timestamp ? `Time: ${result.chunk.timestamp}` : \"\"}\nMatch Reason: ${result.matchReason}\n\nContent: ${result.chunk.text}`;\n        }).join(\"\\n\\n---\\n\\n\");\n        // Generate response with anti-hallucination prompt\n        const messages = [\n            {\n                role: \"system\",\n                content: createAntiHallucinationPrompt(results)\n            },\n            {\n                role: \"user\",\n                content: `TRANSCRIPT CONTENT:\\n\\n${context}\\n\\nQUESTION: ${query}\\n\\nProvide a response using ONLY the information above. Include specific episode citations and confidence levels.`\n            }\n        ];\n        const response = await generateWithGroq(messages);\n        console.log(\"Enhanced response generated successfully\");\n        return response;\n    } catch (error) {\n        console.error(\"Error in enhanced generation:\", error);\n        return `I encountered an error processing your question. Please try again.`;\n    }\n}\n// Helper functions (implement the missing ones from your original code)\nfunction formatEpisodeTitle(episodeName) {\n    return episodeName.replace(/[-_]/g, \" \").replace(/\\b\\w/g, (l)=>l.toUpperCase());\n}\nfunction getAvailableTopics() {\n    const allTopicsSet = new Set();\n    enhancedChunks.forEach((chunk)=>{\n        chunk.topics.forEach((topic)=>allTopicsSet.add(topic));\n    });\n    return Array.from(allTopicsSet).slice(0, 10) // Top 10 topics\n    ;\n}\nfunction explainMatch(query, chunk, score) {\n    const reasons = [];\n    if (chunk.topics.length > 0) {\n        const queryTopics = extractTopics(query);\n        const matchingTopics = chunk.topics.filter((topic)=>queryTopics.includes(topic));\n        if (matchingTopics.length > 0) {\n            reasons.push(`Topic match: ${matchingTopics.join(\", \")}`);\n        }\n    }\n    const keywordMatches = findKeywordMatches(query, chunk.text);\n    if (keywordMatches.length > 0) {\n        reasons.push(`Keywords: ${keywordMatches.slice(0, 3).join(\", \")}`);\n    }\n    if (score > 0.7) {\n        reasons.push(\"High semantic similarity\");\n    }\n    return reasons.length > 0 ? reasons.join(\"; \") : \"General relevance\";\n}\n// Additional helper functions you'll need to implement\nfunction cosineSimilarity(a, b) {\n    // Handle null/undefined cases\n    if (!a || !b || a.length !== b.length || a.length === 0) return 0;\n    let dot = 0, magA = 0, magB = 0;\n    for(let i = 0; i < a.length; i++){\n        dot += a[i] * b[i];\n        magA += a[i] * a[i];\n        magB += b[i] * b[i];\n    }\n    const magnitude = Math.sqrt(magA * magB);\n    return magnitude > 0 ? dot / magnitude : 0;\n}\nfunction calculateKeywordRelevance(query, text) {\n    // Enhanced version of your existing function\n    const queryWords = query.toLowerCase().split(/\\s+/).filter((word)=>word.length > 2);\n    const textLower = text.toLowerCase();\n    let score = 0;\n    queryWords.forEach((word)=>{\n        const matches = (textLower.match(new RegExp(word, \"g\")) || []).length;\n        score += matches * (word.length / 10);\n    });\n    if (textLower.includes(query.toLowerCase())) {\n        score += 2;\n    }\n    return Math.min(score / (queryWords.length * 2), 1);\n}\nfunction enhancedKeywordSearch(query, chunks) {\n    // Implement enhanced keyword search\n    const queryWords = query.toLowerCase().split(/\\s+/).filter((word)=>word.length > 2);\n    return chunks.map((chunk)=>({\n            chunk,\n            score: calculateKeywordRelevance(query, chunk.text + \" \" + chunk.context)\n        })).filter((result)=>result.score > 0.3).sort((a, b)=>b.score - a.score).slice(0, 8).map((r)=>r.chunk);\n}\nfunction findKeywordMatches(query, text) {\n    const queryWords = query.toLowerCase().split(/\\s+/).filter((word)=>word.length > 2);\n    const textLower = text.toLowerCase();\n    return queryWords.filter((word)=>textLower.includes(word));\n}\n// Initialize enhanced system\nasync function initializeEnhanced() {\n    if (isReady) return;\n    console.log(\"\\uD83D\\uDE80 Initializing enhanced system...\");\n    try {\n        const transcriptPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"public\", \"transcripts\");\n        const files = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readdir(transcriptPath);\n        const txtFiles = files.filter((f)=>f.endsWith(\".txt\"));\n        for (const filename of txtFiles){\n            const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(transcriptPath, filename);\n            const content = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readFile(filePath, \"utf-8\");\n            const episodeName = filename.replace(\".txt\", \"\");\n            const chunks = createSmartChunks(content, episodeName);\n            enhancedChunks.push(...chunks);\n            console.log(`Processed ${filename}: ${chunks.length} smart chunks`);\n        }\n        // Create embeddings for a subset (for testing)\n        const chunksToEmbed = enhancedChunks.slice(0, 30);\n        for (const chunk of chunksToEmbed){\n            const embedding = await getEmbedding(chunk.text);\n            if (embedding) {\n                chunk.embedding = embedding;\n            }\n            await new Promise((resolve)=>setTimeout(resolve, 500)) // Rate limit\n            ;\n        }\n        isReady = true;\n        console.log(`✅ Enhanced system ready with ${enhancedChunks.length} chunks`);\n    } catch (error) {\n        console.error(\"Enhanced initialization failed:\", error);\n    }\n}\n// Keep your existing helper functions (getEmbedding, generateWithGroq, etc.)\nasync function getEmbedding(text) {\n    // Your existing implementation\n    if (!OPENAI_API_KEY) return undefined;\n    try {\n        const response = await fetch(\"https://api.openai.com/v1/embeddings\", {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${OPENAI_API_KEY}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                model: \"text-embedding-ada-002\",\n                input: text.trim()\n            })\n        });\n        if (!response.ok) return undefined;\n        const data = await response.json();\n        return data.data[0].embedding;\n    } catch (error) {\n        return undefined;\n    }\n}\nasync function generateWithGroq(messages) {\n    // Your existing implementation\n    if (!GROQ_API_KEY) return \"GROQ_API_KEY not configured\";\n    try {\n        const response = await fetch(\"https://api.groq.com/openai/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${GROQ_API_KEY}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                model: \"llama3-8b-8192\",\n                messages: messages,\n                max_tokens: 800,\n                temperature: 0.2 // Lower temperature for less hallucination\n            })\n        });\n        if (!response.ok) {\n            return `Groq API error (${response.status})`;\n        }\n        const data = await response.json();\n        return data.choices?.[0]?.message?.content || \"No response generated\";\n    } catch (error) {\n        return `Request failed: ${error}`;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/ai.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cprafu%5CDownloads%5Cwtf_prototype%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cprafu%5CDownloads%5Cwtf_prototype&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();