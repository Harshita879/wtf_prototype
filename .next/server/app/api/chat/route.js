"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat/route";
exports.ids = ["app/api/chat/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cprafu%5CDownloads%5Cwtf_prototype%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cprafu%5CDownloads%5Cwtf_prototype&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cprafu%5CDownloads%5Cwtf_prototype%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cprafu%5CDownloads%5Cwtf_prototype&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_prafu_Downloads_wtf_prototype_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/chat/route.ts */ \"(rsc)/./src/app/api/chat/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat/route\",\n        pathname: \"/api/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\prafu\\\\Downloads\\\\wtf_prototype\\\\src\\\\app\\\\api\\\\chat\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_prafu_Downloads_wtf_prototype_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/chat/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjaGF0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZjaGF0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY2hhdCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNwcmFmdSU1Q0Rvd25sb2FkcyU1Q3d0Zl9wcm90b3R5cGUlNUNzcmMlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q3ByYWZ1JTVDRG93bmxvYWRzJTVDd3RmX3Byb3RvdHlwZSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDeUI7QUFDdEc7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93dGYtcG9kY2FzdC8/YTQ0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxwcmFmdVxcXFxEb3dubG9hZHNcXFxcd3RmX3Byb3RvdHlwZVxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxjaGF0XFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jaGF0L3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvY2hhdFwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvY2hhdC9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXHByYWZ1XFxcXERvd25sb2Fkc1xcXFx3dGZfcHJvdG90eXBlXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGNoYXRcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2NoYXQvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cprafu%5CDownloads%5Cwtf_prototype%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cprafu%5CDownloads%5Cwtf_prototype&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/chat/route.ts":
/*!***********************************!*\
  !*** ./src/app/api/chat/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_ai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/ai */ \"(rsc)/./src/lib/ai.ts\");\n\n\nasync function POST(request) {\n    try {\n        const { message, useEnhanced = false } = await request.json();\n        if (!message || typeof message !== \"string\") {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Valid message is required\"\n            }, {\n                status: 400\n            });\n        }\n        const cleanMessage = message.trim();\n        if (cleanMessage.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Message cannot be empty\"\n            }, {\n                status: 400\n            });\n        }\n        // Rate limiting check (optional)\n        if (cleanMessage.length > 500) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Message too long. Please keep it under 500 characters.\"\n            }, {\n                status: 400\n            });\n        }\n        let response;\n        let processingTime;\n        const startTime = Date.now();\n        try {\n            // For now, use the original system (enhanced system will be integrated later)\n            console.log(\"\\uD83D\\uDCDD Using RAG system...\");\n            response = await (0,_lib_ai__WEBPACK_IMPORTED_MODULE_1__.generateResponse)(cleanMessage);\n            processingTime = Date.now() - startTime;\n            console.log(`✅ Response generated in ${processingTime}ms`);\n        } catch (error) {\n            console.error(\"AI generation error:\", error);\n            response = (0,_lib_ai__WEBPACK_IMPORTED_MODULE_1__.getQuickResponse)(cleanMessage);\n            processingTime = Date.now() - startTime;\n        }\n        // Add response metadata\n        const responseData = {\n            response: response,\n            metadata: {\n                processingTime: processingTime,\n                systemUsed: useEnhanced ? \"enhanced\" : \"original\",\n                timestamp: new Date().toISOString(),\n                messageLength: cleanMessage.length\n            }\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(responseData);\n    } catch (error) {\n        console.error(\"Chat API error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Something went wrong! Please try again.\",\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const action = searchParams.get(\"action\");\n        // System status endpoint\n        if (action === \"status\") {\n            console.log(\"\\uD83D\\uDCCA Checking system status...\");\n            try {\n                const status = await (0,_lib_ai__WEBPACK_IMPORTED_MODULE_1__.getSystemStatus)();\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    status: \"WTF Podcast AI is running! \\uD83E\\uDD16\",\n                    systemDetails: JSON.parse(status),\n                    timestamp: new Date().toISOString()\n                });\n            } catch (error) {\n                console.error(\"Status check failed:\", error);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    status: \"System status check failed\",\n                    error: error instanceof Error ? error.message : \"Unknown error\",\n                    timestamp: new Date().toISOString()\n                }, {\n                    status: 500\n                });\n            }\n        }\n        // Health check endpoint\n        if (action === \"health\") {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                status: \"healthy\",\n                service: \"WTF Podcast AI\",\n                version: \"2.0.0\",\n                features: {\n                    ragRetrieval: true,\n                    semanticSearch: true,\n                    keywordFallback: true\n                },\n                timestamp: new Date().toISOString()\n            });\n        }\n        // Default response\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            status: \"WTF Podcast AI is running! \\uD83E\\uDD16\",\n            message: \"Send a POST request with your question\",\n            endpoints: {\n                chat: \"POST /\",\n                status: \"GET /?action=status\",\n                health: \"GET /?action=health\"\n            },\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"GET endpoint error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to process request\",\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    }\n}\n// Optional: Add OPTIONS for CORS if needed\nasync function OPTIONS(request) {\n    return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n        status: 200,\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\n            \"Access-Control-Allow-Headers\": \"Content-Type\"\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/chat/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/ai.ts":
/*!***********************!*\
  !*** ./src/lib/ai.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateEnhancedResponse: () => (/* binding */ generateEnhancedResponse),\n/* harmony export */   generateResponse: () => (/* binding */ generateResponse),\n/* harmony export */   getQuickResponse: () => (/* binding */ getQuickResponse),\n/* harmony export */   getSystemStatus: () => (/* binding */ getSystemStatus)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n// lib/ai.ts\n// Enhanced podcast Q&A system with improved response formatting\n\n\n// --- CONFIGURATION ---\nconst GROQ_API_KEY = process.env.GROQ_API_KEY;\nconst OPENAI_API_KEY = process.env.OPENAI_API_KEY;\nif (!GROQ_API_KEY) {\n    console.error(\"❌ GROQ_API_KEY environment variable is required\");\n}\nif (!OPENAI_API_KEY) {\n    console.error(\"❌ OPENAI_API_KEY environment variable is required\");\n}\n// --- GLOBAL STATE ---\nlet chunks = [];\nlet enhancedChunks = [];\nlet isReady = false;\nlet isEnhancedReady = false;\nlet initError = null;\n// --- HELPER FUNCTIONS ---\nfunction log(message, data) {\n    console.log(`[AI] ${message}`, data ? JSON.stringify(data, null, 2) : \"\");\n}\n// Calculate similarity between two vectors\nfunction similarity(a, b) {\n    if (!a || !b || a.length !== b.length) return 0;\n    let dot = 0, magA = 0, magB = 0;\n    for(let i = 0; i < a.length; i++){\n        dot += a[i] * b[i];\n        magA += a[i] * a[i];\n        magB += b[i] * b[i];\n    }\n    const magnitude = Math.sqrt(magA * magB);\n    return magnitude > 0 ? dot / magnitude : 0;\n}\n// Enhanced cosine similarity (handles undefined)\nfunction cosineSimilarity(a, b) {\n    if (!a || !b || a.length !== b.length || a.length === 0) return 0;\n    let dot = 0, magA = 0, magB = 0;\n    for(let i = 0; i < a.length; i++){\n        dot += a[i] * b[i];\n        magA += a[i] * a[i];\n        magB += b[i] * b[i];\n    }\n    const magnitude = Math.sqrt(magA * magB);\n    return magnitude > 0 ? dot / magnitude : 0;\n}\n// Get embedding from OpenAI with detailed error handling\nasync function getEmbedding(text) {\n    if (!OPENAI_API_KEY) {\n        log(\"❌ No OpenAI API key provided\");\n        return undefined;\n    }\n    if (!text.trim() || text.trim().length < 10) {\n        log(\"❌ Text too short for embedding\");\n        return undefined;\n    }\n    try {\n        log(`🔄 Creating embedding for text: \"${text.slice(0, 50)}...\"`);\n        const response = await fetch(\"https://api.openai.com/v1/embeddings\", {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${OPENAI_API_KEY}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                model: \"text-embedding-ada-002\",\n                input: text.trim()\n            })\n        });\n        log(`OpenAI response status: ${response.status}`);\n        if (!response.ok) {\n            const errorBody = await response.text();\n            log(`❌ OpenAI API error ${response.status}:`, errorBody);\n            return undefined;\n        }\n        const data = await response.json();\n        if (!data.data || !data.data[0] || !data.data[0].embedding) {\n            log(\"❌ Invalid embedding response structure:\", data);\n            return undefined;\n        }\n        log(\"✅ Embedding created successfully\");\n        return data.data[0].embedding;\n    } catch (error) {\n        log(\"❌ Embedding request failed:\", error);\n        return undefined;\n    }\n}\n// --- ENHANCED CHUNKING ---\n// Create smart chunks that preserve context and speaker boundaries\nfunction createSmartChunks(content, episodeName) {\n    const chunks = [];\n    // Split by natural boundaries (paragraphs, speaker changes)\n    const sections = content.split(/\\n\\s*\\n|\\n(?=[A-Z][a-z]*:)/).filter((s)=>s.trim().length > 50);\n    let chunkIndex = 0;\n    for(let i = 0; i < sections.length; i++){\n        const section = sections[i].trim();\n        // If section is too long, split smartly\n        if (section.length > 800) {\n            const sentences = section.split(/[.!?]+/).filter((s)=>s.trim().length > 20);\n            let currentChunk = \"\";\n            for (const sentence of sentences){\n                if ((currentChunk + sentence).length > 600) {\n                    if (currentChunk.trim()) {\n                        chunks.push(createChunkWithMetadata(currentChunk.trim(), episodeName, chunkIndex++, {\n                            prevContext: i > 0 ? sections[i - 1].slice(-100) : \"\",\n                            nextContext: i < sections.length - 1 ? sections[i + 1].slice(0, 100) : \"\"\n                        }));\n                    }\n                    currentChunk = sentence;\n                } else {\n                    currentChunk += sentence + \". \";\n                }\n            }\n            if (currentChunk.trim()) {\n                chunks.push(createChunkWithMetadata(currentChunk.trim(), episodeName, chunkIndex++, {\n                    prevContext: i > 0 ? sections[i - 1].slice(-100) : \"\",\n                    nextContext: i < sections.length - 1 ? sections[i + 1].slice(0, 100) : \"\"\n                }));\n            }\n        } else {\n            // Section is good size, keep as-is\n            chunks.push(createChunkWithMetadata(section, episodeName, chunkIndex++, {\n                prevContext: i > 0 ? sections[i - 1].slice(-100) : \"\",\n                nextContext: i < sections.length - 1 ? sections[i + 1].slice(0, 100) : \"\"\n            }));\n        }\n    }\n    return chunks;\n}\n// Create chunk with enhanced metadata\nfunction createChunkWithMetadata(text, episodeName, index, context) {\n    // Extract speaker information\n    const speakerMatch = text.match(/^([A-Z][a-z\\s]+):\\s*(.+)/);\n    let speaker = \"unknown\";\n    let guestName;\n    let cleanText = text;\n    if (speakerMatch) {\n        const speakerName = speakerMatch[1].toLowerCase();\n        cleanText = speakerMatch[2];\n        if (speakerName.includes(\"nikhil\") || speakerName.includes(\"host\")) {\n            speaker = \"host\";\n        } else {\n            speaker = \"guest\";\n            guestName = speakerMatch[1];\n        }\n    }\n    // Extract topics using enhanced keyword detection\n    const topics = extractTopics(cleanText + \" \" + context.prevContext + \" \" + context.nextContext);\n    // Extract timestamp if present\n    const timestampMatch = text.match(/\\[(\\d{1,2}:\\d{2}(?::\\d{2})?)\\]/);\n    const timestamp = timestampMatch ? timestampMatch[1] : undefined;\n    return {\n        text: cleanText,\n        episode: episodeName,\n        episodeTitle: formatEpisodeTitle(episodeName),\n        speaker,\n        guestName,\n        timestamp,\n        topics,\n        index,\n        context: context.prevContext + \" [...] \" + context.nextContext\n    };\n}\n// Enhanced topic extraction\nfunction extractTopics(text) {\n    const topicPatterns = {\n        \"real-estate\": /real estate|property|housing|construction|builder|apartment|rent/gi,\n        \"gaming\": /game|gaming|esports|mobile gaming|pc gaming|console|developer/gi,\n        \"startup\": /startup|entrepreneur|business|company|venture|founder/gi,\n        \"fintech\": /fintech|financial|banking|payment|wallet|upi|digital payment/gi,\n        \"edtech\": /education|learning|online course|skill|training|edtech/gi,\n        \"food\": /restaurant|food|dining|kitchen|chef|delivery|zomato|swiggy/gi,\n        \"ev\": /electric vehicle|ev|battery|automotive|car|vehicle|charging/gi,\n        \"investment\": /investment|funding|vc|investor|capital|valuation|ipo/gi,\n        \"marketing\": /marketing|brand|advertising|content|social media|influencer/gi,\n        \"healthcare\": /healthcare|medical|hospital|doctor|telemedicine|pharma/gi\n    };\n    const detectedTopics = [];\n    Object.entries(topicPatterns).forEach(([topic, pattern])=>{\n        if (pattern.test(text)) {\n            detectedTopics.push(topic);\n        }\n    });\n    return detectedTopics;\n}\nfunction formatEpisodeTitle(episodeName) {\n    return episodeName.replace(/[-_]/g, \" \").replace(/\\b\\w/g, (l)=>l.toUpperCase());\n}\n// --- ORIGINAL SYSTEM (IMPROVED) ---\n// Initialize the system - load and embed transcripts\nasync function initialize() {\n    if (isReady || initError) return;\n    try {\n        log(\"\\uD83D\\uDE80 Initializing transcript system...\");\n        // Find transcript files\n        const transcriptPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"public\", \"transcripts\");\n        log(`Looking for transcripts in: ${transcriptPath}`);\n        let files = [];\n        try {\n            files = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readdir(transcriptPath);\n            files = files.filter((f)=>f.endsWith(\".txt\"));\n        } catch (error) {\n            initError = `Cannot access transcript directory: ${transcriptPath}`;\n            log(initError);\n            return;\n        }\n        if (files.length === 0) {\n            initError = \"No .txt transcript files found\";\n            log(initError);\n            return;\n        }\n        log(`Found ${files.length} transcript files`);\n        // Process each transcript file\n        let totalChunks = 0;\n        for (const filename of files){\n            try {\n                const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(transcriptPath, filename);\n                const content = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readFile(filePath, \"utf-8\");\n                const episodeName = filename.replace(\".txt\", \"\");\n                if (content.trim().length < 100) {\n                    log(`Skipping ${filename} - too short`);\n                    continue;\n                }\n                // Split into chunks of ~500 characters\n                const chunkSize = 500;\n                let chunkIndex = 0;\n                for(let i = 0; i < content.length; i += chunkSize){\n                    const chunkText = content.slice(i, i + chunkSize).trim();\n                    if (chunkText.length > 50) {\n                        chunks.push({\n                            text: chunkText,\n                            episode: filename.replace(\".txt\", \"\"),\n                            index: chunkIndex++\n                        });\n                        totalChunks++;\n                    }\n                }\n                log(`Processed ${filename}: ${chunkIndex} chunks`);\n            } catch (error) {\n                log(`Error reading ${filename}:`, error);\n            }\n        }\n        if (totalChunks === 0) {\n            initError = \"No valid content chunks created from transcripts\";\n            log(initError);\n            return;\n        }\n        log(`📄 Created ${totalChunks} total chunks`);\n        // Create embeddings with better error handling\n        const chunksToEmbed = chunks.slice(0, 50) // Limit to first 50 chunks for testing\n        ;\n        log(`🔄 Creating embeddings for ${chunksToEmbed.length} chunks...`);\n        let embeddedCount = 0;\n        let consecutiveFailures = 0;\n        for(let i = 0; i < chunksToEmbed.length; i++){\n            const chunk = chunksToEmbed[i];\n            if (i % 5 === 0) {\n                log(`Embedding progress: ${i + 1}/${chunksToEmbed.length} (${embeddedCount} successful)`);\n            }\n            const embedding = await getEmbedding(chunk.text);\n            if (embedding) {\n                chunk.embedding = embedding;\n                embeddedCount++;\n                consecutiveFailures = 0;\n            } else {\n                consecutiveFailures++;\n                if (consecutiveFailures >= 5) {\n                    log(\"❌ Too many consecutive embedding failures, stopping\");\n                    break;\n                }\n            }\n            await new Promise((resolve)=>setTimeout(resolve, 500));\n        }\n        log(`✅ Successfully embedded ${embeddedCount}/${chunksToEmbed.length} chunks`);\n        isReady = true;\n        log(\"\\uD83C\\uDF89 System ready!\");\n    } catch (error) {\n        initError = `Initialization failed: ${error}`;\n        log(initError);\n    }\n}\n// Enhanced keyword search with better relevance\nfunction searchByKeywordsEnhanced(query) {\n    const queryWords = query.toLowerCase().split(/\\s+/).filter((word)=>word.length > 2);\n    if (queryWords.length === 0) return [];\n    const results = chunks.map((chunk)=>{\n        const text = chunk.text.toLowerCase();\n        let score = 0;\n        let matchedWords = 0;\n        queryWords.forEach((word)=>{\n            const matches = (text.match(new RegExp(word, \"g\")) || []).length;\n            if (matches > 0) {\n                score += matches;\n                matchedWords++;\n            }\n        });\n        if (text.includes(query.toLowerCase())) {\n            score += 5;\n        }\n        const coverage = matchedWords / queryWords.length;\n        if (coverage < 0.3) {\n            score *= 0.5;\n        }\n        return {\n            chunk,\n            score\n        };\n    }).filter((result)=>result.score > 0.5).sort((a, b)=>b.score - a.score).slice(0, 3);\n    return results.map((r)=>r.chunk);\n}\n// Enhanced search with better query understanding\nasync function findRelevantChunks(query) {\n    await initialize();\n    if (!isReady) {\n        log(\"❌ System not ready\");\n        return [];\n    }\n    // First try semantic search with embeddings\n    const queryEmbedding = await getEmbedding(query);\n    if (queryEmbedding) {\n        log(\"\\uD83C\\uDFAF Using semantic search\");\n        const withEmbeddings = chunks.filter((chunk)=>chunk.embedding);\n        if (withEmbeddings.length > 0) {\n            const results = withEmbeddings.map((chunk)=>({\n                    chunk,\n                    score: similarity(queryEmbedding, chunk.embedding)\n                })).filter((result)=>result.score > 0.2).sort((a, b)=>b.score - a.score).slice(0, 3);\n            if (results.length > 0) {\n                log(`✅ Found ${results.length} semantic matches`);\n                return results.map((r)=>r.chunk);\n            }\n        }\n    }\n    // Fallback to enhanced keyword search\n    log(\"⚠️ Falling back to enhanced keyword search\");\n    return searchByKeywordsEnhanced(query);\n}\n// Call Groq API to generate response\nasync function generateWithGroq(messages) {\n    if (!GROQ_API_KEY) {\n        return \"Error: GROQ_API_KEY not configured\";\n    }\n    log(\"Calling Groq API...\");\n    try {\n        const response = await fetch(\"https://api.groq.com/openai/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${GROQ_API_KEY}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                model: \"llama3-8b-8192\",\n                messages: messages,\n                max_tokens: 800,\n                temperature: 0.2 // Lower temperature for less hallucination\n            })\n        });\n        log(`Groq response status: ${response.status}`);\n        if (!response.ok) {\n            const errorText = await response.text();\n            log(\"Groq error:\", errorText);\n            return `Groq API error (${response.status})`;\n        }\n        const data = await response.json();\n        const content = data.choices?.[0]?.message?.content;\n        if (!content) {\n            log(\"No content in Groq response\");\n            return \"No response generated\";\n        }\n        log(`Generated response (${content.length} chars)`);\n        return content.trim();\n    } catch (error) {\n        log(\"Groq request failed:\", error);\n        return `Request failed: ${error}`;\n    }\n}\n// --- ENHANCED SYSTEM ---\n// Initialize enhanced system\nasync function initializeEnhanced() {\n    if (isEnhancedReady) return;\n    log(\"\\uD83D\\uDE80 Initializing enhanced system...\");\n    try {\n        const transcriptPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"public\", \"transcripts\");\n        const files = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readdir(transcriptPath);\n        const txtFiles = files.filter((f)=>f.endsWith(\".txt\"));\n        for (const filename of txtFiles){\n            const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(transcriptPath, filename);\n            const content = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readFile(filePath, \"utf-8\");\n            const episodeName = filename.replace(\".txt\", \"\");\n            const chunks = createSmartChunks(content, episodeName);\n            enhancedChunks.push(...chunks);\n            log(`Processed ${filename}: ${chunks.length} smart chunks`);\n        }\n        // Create embeddings for a subset (for testing)\n        const chunksToEmbed = enhancedChunks.slice(0, 30);\n        for (const chunk of chunksToEmbed){\n            const embedding = await getEmbedding(chunk.text);\n            if (embedding) {\n                chunk.embedding = embedding;\n            }\n            await new Promise((resolve)=>setTimeout(resolve, 500)) // Rate limit\n            ;\n        }\n        isEnhancedReady = true;\n        log(`✅ Enhanced system ready with ${enhancedChunks.length} chunks`);\n    } catch (error) {\n        log(\"Enhanced initialization failed:\", error);\n    }\n}\n// Multi-stage retrieval for enhanced system\nasync function performMultiStageRetrieval(query) {\n    const results = [];\n    // Stage 1: Topic-based filtering\n    const queryTopics = extractTopics(query);\n    const topicFilteredChunks = queryTopics.length > 0 ? enhancedChunks.filter((chunk)=>chunk.topics.some((topic)=>queryTopics.includes(topic))) : enhancedChunks;\n    log(`Stage 1: Filtered to ${topicFilteredChunks.length} chunks by topics: ${queryTopics.join(\", \")}`);\n    // Stage 2: Semantic similarity (if embeddings available)\n    const queryEmbedding = await getEmbedding(query);\n    let semanticCandidates = [];\n    if (queryEmbedding) {\n        const semanticResults = topicFilteredChunks.filter((chunk)=>chunk.embedding).map((chunk)=>({\n                chunk,\n                similarity: cosineSimilarity(queryEmbedding, chunk.embedding || [])\n            })).filter((result)=>result.similarity > 0.25).sort((a, b)=>b.similarity - a.similarity).slice(0, 10);\n        semanticCandidates = semanticResults.map((r)=>r.chunk);\n        log(`Stage 2: Found ${semanticCandidates.length} semantic matches`);\n    }\n    // Stage 3: Enhanced keyword matching\n    const keywordCandidates = enhancedKeywordSearch(query, topicFilteredChunks);\n    // Stage 4: Combine and re-rank results\n    const combinedCandidates = [\n        ...semanticCandidates,\n        ...keywordCandidates\n    ];\n    const uniqueCandidatesMap = new Map();\n    combinedCandidates.forEach((chunk)=>{\n        const key = `${chunk.episode}-${chunk.index}`;\n        if (!uniqueCandidatesMap.has(key)) {\n            uniqueCandidatesMap.set(key, chunk);\n        }\n    });\n    const allCandidates = Array.from(uniqueCandidatesMap.values());\n    for (const chunk of allCandidates){\n        const relevanceScore = calculateEnhancedRelevance(query, chunk, queryEmbedding || undefined);\n        const confidenceLevel = determineConfidenceLevel(relevanceScore, chunk, query);\n        const matchReason = explainMatch(query, chunk, relevanceScore);\n        if (relevanceScore > 0.3) {\n            results.push({\n                chunk,\n                relevanceScore,\n                confidenceLevel,\n                matchReason\n            });\n        }\n    }\n    return results.sort((a, b)=>b.relevanceScore - a.relevanceScore).slice(0, 5);\n}\nfunction enhancedKeywordSearch(query, chunks) {\n    const queryWords = query.toLowerCase().split(/\\s+/).filter((word)=>word.length > 2);\n    return chunks.map((chunk)=>({\n            chunk,\n            score: calculateKeywordRelevance(query, chunk.text + \" \" + chunk.context)\n        })).filter((result)=>result.score > 0.3).sort((a, b)=>b.score - a.score).slice(0, 8).map((r)=>r.chunk);\n}\nfunction calculateKeywordRelevance(query, text) {\n    const queryWords = query.toLowerCase().split(/\\s+/).filter((word)=>word.length > 2);\n    const textLower = text.toLowerCase();\n    let score = 0;\n    queryWords.forEach((word)=>{\n        const matches = (textLower.match(new RegExp(word, \"g\")) || []).length;\n        score += matches * (word.length / 10);\n    });\n    if (textLower.includes(query.toLowerCase())) {\n        score += 2;\n    }\n    return Math.min(score / (queryWords.length * 2), 1);\n}\nfunction calculateEnhancedRelevance(query, chunk, queryEmbedding) {\n    let score = 0;\n    // Semantic similarity (40% weight)\n    if (queryEmbedding && chunk.embedding) {\n        const semanticScore = cosineSimilarity(queryEmbedding, chunk.embedding);\n        score += semanticScore * 0.4;\n    }\n    // Keyword relevance (30% weight)\n    const keywordScore = calculateKeywordRelevance(query, chunk.text);\n    score += keywordScore * 0.3;\n    // Topic alignment (20% weight)\n    const queryTopics = extractTopics(query);\n    const topicOverlap = chunk.topics.filter((topic)=>queryTopics.includes(topic)).length;\n    const topicScore = queryTopics.length > 0 ? topicOverlap / queryTopics.length : 0.5;\n    score += topicScore * 0.2;\n    // Context relevance (10% weight)\n    const contextScore = calculateKeywordRelevance(query, chunk.context);\n    score += contextScore * 0.1;\n    return Math.min(score, 1);\n}\nfunction determineConfidenceLevel(score, chunk, query) {\n    if (score > 0.7 && chunk.topics.length > 0) {\n        const queryTopics = extractTopics(query);\n        if (queryTopics.some((topic)=>chunk.topics.includes(topic))) {\n            return \"high\";\n        }\n    }\n    if (score > 0.5) {\n        return \"medium\";\n    }\n    return \"low\";\n}\nfunction explainMatch(query, chunk, score) {\n    const reasons = [];\n    if (chunk.topics.length > 0) {\n        const queryTopics = extractTopics(query);\n        const matchingTopics = chunk.topics.filter((topic)=>queryTopics.includes(topic));\n        if (matchingTopics.length > 0) {\n            reasons.push(`Topic match: ${matchingTopics.join(\", \")}`);\n        }\n    }\n    const keywordMatches = findKeywordMatches(query, chunk.text);\n    if (keywordMatches.length > 0) {\n        reasons.push(`Keywords: ${keywordMatches.slice(0, 3).join(\", \")}`);\n    }\n    if (score > 0.7) {\n        reasons.push(\"High semantic similarity\");\n    }\n    return reasons.length > 0 ? reasons.join(\"; \") : \"General relevance\";\n}\nfunction findKeywordMatches(query, text) {\n    const queryWords = query.toLowerCase().split(/\\s+/).filter((word)=>word.length > 2);\n    const textLower = text.toLowerCase();\n    return queryWords.filter((word)=>textLower.includes(word));\n}\n// Improved prompt for cleaner, more professional responses\nfunction createCleanResponsePrompt(results) {\n    const highConfidenceResults = results.filter((r)=>r.confidenceLevel === \"high\");\n    const mediumConfidenceResults = results.filter((r)=>r.confidenceLevel === \"medium\");\n    return `You are a professional podcast analyst. Provide clean, well-structured responses based strictly on the provided transcript content.\n\n**RESPONSE STRUCTURE:**\n1. Start with a clear, direct answer to the question\n2. Provide key insights with specific details from the episodes\n3. Include relevant episode sources naturally in the text\n4. End with actionable takeaways when applicable\n\n**FORMATTING RULES:**\n- Write in natural, flowing prose - NO asterisks, bullet points, or formatting markers\n- NO section headers like \"Direct Answer\" or \"Key Insights\" \n- Integrate source citations naturally (e.g., \"According to the episode with [Guest Name]...\")\n- Use confident, professional language\n- Keep paragraphs focused and readable\n\n**CONTENT GUIDELINES:**\n- Only use information directly from the provided transcripts\n- Cite specific episodes and speakers naturally in your response\n- If information is limited, acknowledge this briefly without being apologetic\n- Focus on practical, actionable insights when possible\n- Distinguish between high-confidence (${highConfidenceResults.length} sources) and medium-confidence (${mediumConfidenceResults.length} sources) information when relevant\n\n**TONE:**\n- Professional but conversational\n- Confident and authoritative\n- Helpful and informative\n- No unnecessary qualifiers or hedging\n\nWrite your response as if you're a knowledgeable consultant sharing insights from the podcast content.`;\n}\nfunction getAvailableTopics() {\n    const allTopicsSet = new Set();\n    enhancedChunks.forEach((chunk)=>{\n        chunk.topics.forEach((topic)=>allTopicsSet.add(topic));\n    });\n    return Array.from(allTopicsSet).slice(0, 10);\n}\n// Clean response formatting helper\nfunction cleanResponse(response) {\n    // Remove markdown-style formatting\n    let cleaned = response// Remove bold/italic markers\n    .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\").replace(/\\*([^*]+)\\*/g, \"$1\")// Remove section headers that look like \"**Direct Answer:**\"\n    .replace(/\\*\\*[^*]+\\*\\*:\\s*/g, \"\")// Remove bullet points and convert to flowing text\n    .replace(/^\\s*[-•]\\s*/gm, \"\")// Remove numbered lists formatting\n    .replace(/^\\s*\\d+\\.\\s*/gm, \"\")// Clean up extra whitespace\n    .replace(/\\n\\s*\\n\\s*\\n/g, \"\\n\\n\").replace(/^\\s+|\\s+$/g, \"\");\n    return cleaned;\n}\n// --- PUBLIC API ---\n// Main function to generate response (improved with better formatting)\nasync function generateResponse(query) {\n    log(\"=== NEW QUERY ===\");\n    log(`Query: \"${query}\"`);\n    if (!query?.trim()) {\n        return \"Please ask me a question about the podcast!\";\n    }\n    if (!GROQ_API_KEY) {\n        return \"⚠️ GROQ_API_KEY environment variable not set\";\n    }\n    if (!OPENAI_API_KEY) {\n        return \"⚠️ OPENAI_API_KEY environment variable not set\";\n    }\n    try {\n        const relevantChunks = await findRelevantChunks(query);\n        if (relevantChunks.length === 0) {\n            if (initError) {\n                return `System error: ${initError}`;\n            }\n            return `I don't have relevant information about \"${query}\" in the available episodes. Try asking about topics that were specifically discussed in the podcast.`;\n        }\n        const context = relevantChunks.map((chunk, i)=>`Episode: ${chunk.episode}\n${chunk.text}`).join(\"\\n\\n---\\n\\n\");\n        const messages = [\n            {\n                role: \"system\",\n                content: `You are a professional podcast analyst who provides insightful, well-structured responses. \n\n**RESPONSE GUIDELINES:**\n- Write in natural, flowing prose without any formatting markers (**, *, bullets, etc.)\n- Start directly with your answer - no section headers or labels\n- Integrate episode citations naturally into your response\n- Focus on actionable insights and practical value\n- Use confident, professional language\n- Keep responses conversational but authoritative\n\n**CONTENT RULES:**\n- Only use information from the provided transcript content\n- When referencing content, mention the episode naturally (e.g., \"In the episode about...\")\n- If information is limited, briefly acknowledge this without being apologetic\n- Provide strategic analysis, not just summary\n- Connect insights to practical implications when possible\n\nWrite your response as if you're a knowledgeable consultant sharing insights from the podcast episodes. No formatting markers, section headers, or bullet points - just clean, professional prose.`\n            },\n            {\n                role: \"user\",\n                content: `Podcast content:\\n\\n${context}\\n\\nQuestion: ${query}\\n\\nProvide a clear, insightful response based on this content. Write in natural prose without any formatting markers or section headers.`\n            }\n        ];\n        const response = await generateWithGroq(messages);\n        const cleanedResponse = cleanResponse(response);\n        log(\"Response generated and cleaned successfully\");\n        return cleanedResponse;\n    } catch (error) {\n        log(\"Error in generateResponse:\", error);\n        return `Something went wrong: ${error}`;\n    }\n}\n// Enhanced response generation with improved formatting\nasync function generateEnhancedResponse(query) {\n    log(\"=== ENHANCED QUERY PROCESSING ===\");\n    log(`Query: \"${query}\"`);\n    try {\n        await initializeEnhanced();\n        if (!isEnhancedReady) {\n            return \"Enhanced system not ready. Please check transcript files and API keys.\";\n        }\n        const results = await performMultiStageRetrieval(query);\n        if (results.length === 0) {\n            return `I don't have specific information about \"${query}\" in the available podcast episodes. Try asking about topics that were explicitly discussed, such as: ${getAvailableTopics().join(\", \")}.`;\n        }\n        const context = results.map((result, i)=>{\n            return `Episode: ${result.chunk.episodeTitle}\n${result.chunk.speaker === \"guest\" && result.chunk.guestName ? `Speaker: ${result.chunk.guestName}` : `Speaker: ${result.chunk.speaker}`}\n${result.chunk.timestamp ? `Time: ${result.chunk.timestamp}` : \"\"}\nConfidence: ${result.confidenceLevel}\n\nContent: ${result.chunk.text}`;\n        }).join(\"\\n\\n---\\n\\n\");\n        const messages = [\n            {\n                role: \"system\",\n                content: createCleanResponsePrompt(results)\n            },\n            {\n                role: \"user\",\n                content: `TRANSCRIPT CONTENT:\\n\\n${context}\\n\\nQUESTION: ${query}\\n\\nProvide a professional response using only the information above. Write in clean, natural prose without formatting markers, section headers, or bullet points.`\n            }\n        ];\n        const response = await generateWithGroq(messages);\n        const cleanedResponse = cleanResponse(response);\n        log(\"Enhanced response generated and cleaned successfully\");\n        return cleanedResponse;\n    } catch (error) {\n        log(\"Error in enhanced generation:\", error);\n        return `I encountered an error processing your question. Please try again.`;\n    }\n}\n// Simple fallback function\nfunction getQuickResponse(query) {\n    if (query) {\n        return `I'm having trouble processing your question about \"${query}\". Please try again or ask something else about the podcast!`;\n    }\n    return \"Hi! Ask me about the podcast and I'll search through the available transcripts.\";\n}\n// System status check\nasync function getSystemStatus() {\n    await initialize();\n    const status = {\n        ready: isReady,\n        enhancedReady: isEnhancedReady,\n        error: initError,\n        totalChunks: chunks.length,\n        enhancedChunks: enhancedChunks.length,\n        embeddedChunks: chunks.filter((c)=>c.embedding).length,\n        enhancedEmbeddedChunks: enhancedChunks.filter((c)=>c.embedding).length,\n        hasGroqKey: !!GROQ_API_KEY,\n        hasOpenAIKey: !!OPENAI_API_KEY,\n        availableTopics: isEnhancedReady ? getAvailableTopics() : []\n    };\n    return JSON.stringify(status, null, 2);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/ai.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cprafu%5CDownloads%5Cwtf_prototype%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cprafu%5CDownloads%5Cwtf_prototype&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();